# This Travis job script has been generated by a script via
#
#   haskell-ci 'C-structs.cabal' '--output' '.travis.yml'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.10.2
#
version: ~> 1.0
language: generic
os: linux
dist: xenial
git:
  # whether to recursively clone submodules
  submodules: false
cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.hlint
    - $HOME/.ghc
    - $HOME/.cabal
    - $HOME/.stack
    - $TRAVIS_BUILD_DIR/.stack-work
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $CABALHOME/packages/head.hackage
jobs:
  include:
    - env: BUILD=cabal
      compiler: ghc-8.10.1
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.10.1","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-8.8.3
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.8.3","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-8.6.5
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.6.5","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-8.4.4
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.4.4","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-8.2.2
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.2.2","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-8.0.2
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.0.2","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-7.10.3
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-7.10.3","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-7.8.4
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-7.8.4","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-7.6.3
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-7.6.3","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-7.4.2
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-7.4.2","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-7.2.2
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-7.2.2","cabal-install-3.2"]}}
      os: linux
    - env: BUILD=cabal
      compiler: ghc-7.0.4
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-7.0.4","cabal-install-3.2"]}}
      os: linux

  # Build with the newest GHC and cabal-install. This is an accepted failure,
  # see below.
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC HEAD"
    addons: {apt: {packages: [cabal-install-head,ghc-head,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}

  #- env: BUILD=stack ARGS="--resolver lts-2"
  #  compiler: ": #stack 7.8.4"
  #  addons: {apt: {packages: [libgmp-dev]}}

  #- env: BUILD=stack ARGS="--resolver lts-3"
  #  compiler: ": #stack 7.10.2"
  #  addons: {apt: {packages: [libgmp-dev]}}

  #- env: BUILD=stack ARGS="--resolver lts-6"
  #  compiler: ": #stack 7.10.3"
  #  addons: {apt: {packages: [libgmp-dev]}}

  #- env: BUILD=stack ARGS="--resolver lts-7"
  #  compiler: ": #stack 8.0.1"
  #  addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-9"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-11"
    compiler: ": #stack 8.2.2"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-12"
    compiler: ": #stack 8.4.4"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-14"
    compiler: ": #stack 8.6.5"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-15"
    compiler: ": #stack 8.8.3"
    addons: {apt: {packages: [libgmp-dev]}}

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  # Build on macOS in addition to Linux
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default osx"
    os: osx

  # Travis includes an macOS which is incompatible with GHC 7.8.4
  #- env: BUILD=stack ARGS="--resolver lts-2"
  #  compiler: ": #stack 7.8.4 osx"
  #  os: osx

  #- env: BUILD=stack ARGS="--resolver lts-3"
  #  compiler: ": #stack 7.10.2 osx"
  #  os: osx

  #- env: BUILD=stack ARGS="--resolver lts-6"
  #  compiler: ": #stack 7.10.3 osx"
  #  os: osx

  #- env: BUILD=stack ARGS="--resolver lts-7"
  #  compiler: ": #stack 8.0.1 osx"
  #  os: osx

  - env: BUILD=stack ARGS="--resolver lts-9"
    compiler: ": #stack 8.0.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-11"
    compiler: ": #stack 8.2.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-12"
    compiler: ": #stack 8.4.4 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-14"
    compiler: ": #stack 8.6.5 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-15"
    compiler: ": #stack 8.8.3 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly osx"
    os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  - env: BUILD=stack ARGS="--resolver nightly"

before_install:
  - HC=$(echo "/opt/$CC/bin/ghc" | sed 's/-/\//')
  - WITHCOMPILER="-w $HC"
  - HADDOCK=$(echo "/opt/$CC/bin/haddock" | sed 's/-/\//')
  - HCPKG="$HC-pkg"
  - unset CC
  - CABAL=/opt/ghc/bin/cabal
  - CABALHOME=$HOME/.cabal
  - export PATH="$CABALHOME/bin:$PATH"
  - TOP=$(pwd)
  - "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')"
  - echo $HCNUMVER
  - CABAL="$CABAL -vnormal+nowrap"
  - set -o pipefail
  - TEST=--enable-tests
  - BENCH=--enable-benchmarks
  - HEADHACKAGE=false
  - rm -f $CABALHOME/config
  - |
    echo "verbose: normal +nowrap +markoutput"          >> $CABALHOME/config
    echo "remote-build-reporting: anonymous"            >> $CABALHOME/config
    echo "write-ghc-environment-files: always"          >> $CABALHOME/config
    echo "remote-repo-cache: $CABALHOME/packages"       >> $CABALHOME/config
    echo "logs-dir:          $CABALHOME/logs"           >> $CABALHOME/config
    echo "world-file:        $CABALHOME/world"          >> $CABALHOME/config
    echo "extra-prog-path:   $CABALHOME/bin"            >> $CABALHOME/config
    echo "symlink-bindir:    $CABALHOME/bin"            >> $CABALHOME/config
    echo "installdir:        $CABALHOME/bin"            >> $CABALHOME/config
    echo "build-summary:     $CABALHOME/logs/build.log" >> $CABALHOME/config
    echo "store-dir:         $CABALHOME/store"          >> $CABALHOME/config
    echo "install-dirs user"                            >> $CABALHOME/config
    echo "  prefix: $CABALHOME"                         >> $CABALHOME/config
    echo "repository hackage.haskell.org"               >> $CABALHOME/config
    echo "  url: http://hackage.haskell.org/"           >> $CABALHOME/config
  # We want to always allow newer versions of packages when building on GHC HEAD
  - CABALARGS=""
  - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

  # Download and unpack the stack executable
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
  - mkdir -p ~/.local/bin
  - |
    if [ `uname` = "Darwin" ]
    then
      travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
    else
      travis_retry curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    fi

    # Use the more reliable S3 mirror of Hackage
    mkdir -p $HOME/.cabal
    echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
    echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config
install:
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - if [ -f configure.ac ]; then autoreconf -i; fi
  - |
    set -ex
    case "$BUILD" in
      stack)
        # Add in extra-deps for older snapshots, as necessary
        #
        # This is disabled by default, as relying on the solver like this can
        # make builds unreliable. Instead, if you have this situation, it's
        # recommended that you maintain multiple stack-lts-X.yaml files.

        #stack --no-terminal --install-ghc $ARGS test --bench --dry-run || ( \
        #  stack --no-terminal $ARGS build cabal-install && \
        #  stack --no-terminal $ARGS solver --update-config)

        # Build the dependencies
        stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
        ;;
      cabal)
        ${CABAL} --version
        echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
        echo "program-default-options"                >> $CABALHOME/config
        echo "  ghc-options: $GHCJOBS +RTS -M6G -RTS" >> $CABALHOME/config
        cat $CABALHOME/config
        rm -fv cabal.project cabal.project.local cabal.project.freeze
        travis_retry ${CABAL} v2-update -v
        # Generate cabal.project
        rm -rf cabal.project cabal.project.local cabal.project.freeze
        touch cabal.project
        echo "packages: ." >> cabal.project
        if [ $HCNUMVER -ge 80200 ] ; then echo 'package C-structs' >> cabal.project ; fi
        "if [ $HCNUMVER -ge 80200 ] ; then echo '  ghc-options: -Werror=missing-methods' >> cabal.project ; fi"
        "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(C-structs)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
        cat cabal.project || true
        cat cabal.project.local || true
        if [ -f "./configure.ac" ]; then (cd "." && autoreconf -i); fi
        ${CABAL} v2-freeze $WITHCOMPILER ${TEST} ${BENCH}
        "cat cabal.project.freeze | sed -E 's/^(constraints: *| *)//' | sed 's/any.//'"
        rm  cabal.project.freeze
        travis_wait 40 ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} --dep -j2 all
        travis_wait 40 ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --dep -j2 all
        ;;
    esac
    set +ex
script:
  - |
    set -ex
    case "$BUILD" in
      stack)
        stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
        ;;
      cabal)
        DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
        # Packaging...
        ${CABAL} v2-sdist all
        # Unpacking...
        mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
        cd ${DISTDIR} || false
        find . -maxdepth 1 -type f -name '*.tar.gz' -exec tar -xvf '{}' \;
        find . -maxdepth 1 -type f -name '*.tar.gz' -exec rm       '{}' \;
        PKGDIR_C_structs="$(find . -maxdepth 1 -type d -regex '.*/C-structs-[0-9.]*')"
        # Generate cabal.project
        rm -rf cabal.project cabal.project.local cabal.project.freeze
        touch cabal.project
        echo "packages: ${PKGDIR_C_structs}" >> cabal.project
        if [ $HCNUMVER -ge 80200 ] ; then echo 'package C-structs' >> cabal.project ; fi
        "if [ $HCNUMVER -ge 80200 ] ; then echo '  ghc-options: -Werror=missing-methods' >> cabal.project ; fi"
        "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(C-structs)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
        cat cabal.project || true
        cat cabal.project.local || true
        # Building...
        # this builds all libraries and executables (without tests/benchmarks)
        ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all
        # Building with tests and benchmarks...
        # build & run tests, build benchmarks
        ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} all
        # Testing...
        ${CABAL} v2-test $WITHCOMPILER ${TEST} ${BENCH} all
        # cabal check...
        (cd ${PKGDIR_C_structs} && ${CABAL} -vnormal check)
        # haddock...
        ${CABAL} v2-haddock $WITHCOMPILER --with-haddock $HADDOCK ${TEST} ${BENCH} all
        # Building without installed constraints for packages in global-db...
        rm -f cabal.project.local
        ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all
        ;;
    esac
    set +ex
# REGENDATA ("0.10.2",["C-structs.cabal","--output",".travis.yml"])
# EOF
